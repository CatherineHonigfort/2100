

Some of the lab exercises this week will involve making changes 
to the book's code in the shaffer/ directory.  A convenient way
to do this without messing up the original code is to work on 
a "branch". This is a feature of git and most other version
control systems that lets you maintain multiple versions of 
a repository in parallel.  To do this for today's lab, enter this
command:

$ git checkout -b lab02

Then you can freely change the files, save the changes, test, and
so on.  When you have a version you're happy with, you can commit
it to the repository.  If you changed, for example, the files
list.h and alist.h, then do this:

$ git add list.h alist.h
$ git commit -m "put a message here to remember what you did"

Then, to revert to the original files:

$ git checkout master

To return to the modified files:

$ git checkout lab02


(1) In lecture I noted that some of the virtual functions of List
could actually be implemented, once and for all, as non-virtual functions
in terms of other virtual functions (this is what I called "generic code",
or, confusingly, "template methods"). 

Reimplement as many of the methods of List as you can as non-virtual
methods.  Then 
