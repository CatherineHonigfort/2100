
The starting point for this lab is the same code from last week's lab,
Vector3D.h and Vector3D.cpp in the folder ../lab00.

(1) Write a VectorND class that can be of any dimension, using Vector3D
as a model.  The methods will need to change slightly.  The old
constructor

Vector3D()

should now be:

VectorND(int n)

where the dimension of the vector is passed as an argument.  You'll
need to use the "new" operator in the body of the constructor to 
allocate memory for the array.  You'll also need to add a destructor
to clean up this memory (remember: "a delete for every new"!)

You can kill the 

Vector3D(int x, int y, int z) 

constructor since it's hard to generalize this to n dimensions.

(2) Last week you wrote a small main program that tested Vector3D.
Imagine that you spent 5 years working on that main program, and 
it ended up being over a million lines of code.  That code makes 
many references to Vector3D's all over the place.  

You'd now like to use the dynamic memory allocation of VectorND in place of 
the static array in Vector3D.  How would you do this?  Here are some
options to consider:

(a) "Port" the million line main program so that everywhere you create 
a Vector3D, you now create a VectorND (and pass n=3 to the constructor),
and come up with a suitable replacement for anywhere you used
the Vector3D(float,float,float) constructor.

(b)  Rewrite the internals of Vector3D to use dynamic array;
don't bother with VectorND at all.

(c)   Inherit.

(d)  VectorNd as an attribute

Discuss the pros and cons of each.
Then pick the approach you and your partner think is best, and
implement it.  Make sure the main program from last week still works
as expected.

(3) If you have extra time, try implementing one of the other 
approaches as well.
